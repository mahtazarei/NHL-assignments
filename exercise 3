Third exercise:

There is a CSV file (data_file.csv) which is containing columns for recall and precision values.
We also have a function (plot_data) which reads the CSV file mentioned above and converts the data to a NumPy array. Since the values in the CSV file are strings, it will cause an issue.

Solution:
I am using astype(float) function to change the data type from string to float to fix the mismatch of data types.

import csv
import numpy as np
import matplotlib.pyplot as plt

f = open("data_file.csv", "w")
w = csv.writer(f)
_ = w.writerow(["precision", "recall"])
w.writerows([[0.013, 0.951],
[0.376, 0.851],
[0.441, 0.839],
[0.570, 0.758],
[0.635, 0.674],
[0.721, 0.604],
[0.837, 0.531],
[0.860, 0.453],
[0.962, 0.348],
[0.982, 0.273],
[1.0, 0.0]])
f.close()

def plot_data(csv_file_path: str):
results = []
with open(csv_file_path) as result_csv:
csv_reader = csv.reader(result_csv, delimiter=',')
next(csv_reader)
for row in csv_reader:
results.append(row)
results = np.array(results).astype(float)

plt.plot(results[:, 1], results[:, 0])
plt.ylim([-0.05, 1.05])
plt.xlim([-0.05, 1.05])
plt.xlabel('Recall')
plt.ylabel('Precision')
plt.show()

plot_data('data_file.csv')

This guarantees that when the curve is plotted, the precision and recall values are handled as numerical data.



